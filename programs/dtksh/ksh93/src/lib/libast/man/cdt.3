.fp 5 CW
.TH LIBCDT 3
.SH NAME
\fBCdt\fR \- container data types
.SH SYNOPSIS
.de Tp
.fl
.ne 2
.TP
..
.de Ss
.fl
.ne 2
.SS "\\$1"
..
.de Cs
.nf
.ft 5
..
.de Ce
.ft 1
.fi
..
.ta 1.0i 2.0i 3.0i 4.0i 5.0i
.Cs
#include <cdt.h>
.Ce
.Ss "DICTIONARY TYPES"
.Cs
void*;
Dt_t;
Dtdisc_t;
Dtmethod_t;
Dtlink_t;
Dtstat_t;
Dtuser_t;
.Ce
.Ss "DICTIONARY CONTROL"
.Cs
Dt_t*       dtopen(const Dtdisc_t* disc, const Dtmethod_t* meth);
int         dtclose(Dt_t* dt);
void        dtclear(dt);
Dtdisc_t*   dtdisc(Dt_t* dt, const Dtdisc_t* disc, int type);
Dtmethod_t* dtmethod(Dt_t* dt, const Dtmethod_t* meth);
Dt_t*       dtview(Dt_t* dt, Dt_t* view);
int         dtcustomize(Dt_t* dt, int type, int action);
int         dtuserlock(Dt_t* dt, unsigned int key, int action);
void*       dtuserdata(Dt_t* dt, void* data, int set);
int         dtuserevent(Dt_t* dt, int flags, void* data);
.Ce
.Ss "STORAGE METHODS"
.Cs
Dtmethod_t* Dtset;
Dtmethod_t* Dtbag;
Dtmethod_t* Dtrhset;
Dtmethod_t* Dtrhbag;
Dtmethod_t* Dtoset;
Dtmethod_t* Dtobag;
Dtmethod_t* Dtlist;
Dtmethod_t* Dtstack;
Dtmethod_t* Dtqueue;
Dtmethod_t* Dtdeque;
.Ce
.Ss "DISCIPLINE"
.Cs
#define DTOFFSET(struct_s,member)
#define DTDISC(disc,key,size,link,makef,freef,comparf,hashf,memoryf,eventf)
typedef void*        (*Dtmake_f)(Dt_t*, void*, Dtdisc_t*);
typedef void         (*Dtfree_f)(Dt_t*, void*, Dtdisc_t*);
typedef int          (*Dtcompar_f)(Dt_t*, void*, void*, Dtdisc_t*);
typedef unsigned int (*Dthash_f)(Dt_t*, void*, Dtdisc_t*);
typedef void*        (*Dtmemory_f)(Dt_t*, void*, size_t, Dtdisc_t*);
typedef int          (*Dtevent_f)(Dt_t*, int, void*, Dtdisc_t*);
.Ce
.Ss "OBJECT OPERATIONS"
.Cs
void*     dtinsert(Dt_t* dt, void* obj);
void*     dtinstall(Dt_t* dt, void* obj);
void*     dtappend(Dt_t* dt, void* obj);
void*     dtdelete(Dt_t* dt, void* obj);
void*     dtremove(Dt_t* dt, void* obj);
void*     dtattach(Dt_t* dt, void* obj);
void*     dtdetach(Dt_t* dt, void* obj);
void*     dtsearch(Dt_t* dt, void* obj);
void*     dtmatch(Dt_t* dt, void* key);
void*     dtfirst(Dt_t* dt);
void*     dtnext(Dt_t* dt, void* obj);
void*     dtlast(Dt_t* dt);
void*     dtprev(Dt_t* dt, void* obj);
void*     dtatleast(Dt_t* dt, void* obj);
void*     dtatmost(Dt_t* dt, void* obj);
int       dtwalk(Dt_t* dt, int (*userf)(Dt_t*, void*, void*), void*);
void*     dtstart(Dt_t* dt, void* obj);
void*     dtstep(Dt_t* dt, void* path);
void*     dtstop(Dt_t* dt, void* path);
Dtlink_t* dtflatten(Dt_t* dt);
Dtlink_t* dtlink(Dt_t* dt, Dtlink_t* link);
void*     dtobj(Dt_t* dt, Dtlink_t* link);
Dtlink_t* dtextract(Dt_t* dt);
Dtlink_t* dtrestore(Dt_t* dt, Dtlink_t* link);
.Ce
.Ss "DICTIONARY STATUS"
.Cs
Dt_t*     dtvnext(Dt_t* dt);
ssize_t   dtvcount(Dt_t* dt);
Dt_t*     dtvhere(Dt_t* dt);
ssize_t   dtsize(Dt_t* dt);
ssize_t   dtstat(Dt_t* dt, Dtstat_t* st);
.Ce
.Ss "HASH FUNCTION"
.Cs
unsigned int dtstrhash(unsigned int h, char* str, int n);
.Ce
.SH DESCRIPTION
.PP
\fICdt\fP manages run-time dictionaries using standard container data types:
unordered set/multiset, ordered set/multiset, list, stack, and queue.
.Ss "DICTIONARY TYPES"
.Ss "  void*"
This type is used to pass objects between \fICdt\fP and application code.
.Ss "  Dt_t"
This is the type of a dictionary handle.
It contains a field \f3Dt_t.user\fP of type \f3Dtuser_t*\fP (see below).
.Ss "  Dtdisc_t"
This defines the type of a discipline structure which define the lay-out of
an object and functions to compare, hash, make, delete objects, etc. (see \f3dtdisc()\fP).
.Ss "  Dtmethod_t"
This defines the type of a container method.
.Ss "  Dtlink_t"
This is the type of a dictionary object holder (see \f3dtdisc()\fP).
.Ss "  Dtstat_t"
This is the type of a structure to return dictionary statistics (see \f3dtstat()\fP).
.Ss "  Dtuser_t"
This is the type of a structure pointed to by \f3Dt_t.user\fP.
If a discipline function \f3memoryf()\fP was defined, this structure
will reside in memory allocated via \f3memoryf\fP.
Although the structure is intended to be used by an application outside of CDT operations,
the functions \f3dtuserlock()\fP and \f3dtuserdata()\fP
are provided for certain common usages of the defined fields.
It should be emphasized, however, that a particular application can choose
to use this structure in anyway that it sees fit.
.Cs
    typedef struct
    {   unsigned int lock; /* for locking a shared dictionary */
        void*        data; /* for application-specific data   */
    } Dtuser_t;
.Ce
.Ss "DICTIONARY CONTROL"
.Ss "  Dt_t* dtopen(const Dtdisc_t* disc, const Dtmethod_t* meth)"
This creates a new dictionary.
\f3disc\fP is a discipline structure to describe object format.
\f3meth\fP specifies a manipulation method.
\f3dtopen()\fP returns the new dictionary or \f3NULL\fP on error.
See also the events \f3DT_OPEN\fP and \f3DT_ENDOPEN\fP below.
.Ss "  int dtclose(Dt_t* dt)"
This deletes \f3dt\fP and its objects.
Note that \f3dtclose()\fP fails if \f3dt\fP is being viewed by
some other dictionaries (see \f3dtview()\fP).
\f3dtclose()\fP returns \f30\fP on success and \f3-1\fP on error.
See also the events \f3DT_CLOSE\fP and \f3DT_ENDCLOSE\fP below.
.Ss "  void dtclear(Dt_t* dt)"
This deletes all objects in \f3dt\fP without closing \f3dt\fP.
.Ss "  Dtdisc_t* dtdisc(Dt_t* dt, const Dtdisc_t* disc, int type)"
If \f3disc\fP is \f3NULL\fP, \f3dtdisc()\fP returns the current discipline.
Otherwise, it changes the discipline of \f3dt\fP to \f3disc\fP.
Objects may be rehashed, reordered, or removed as appropriate.
\f3type\fP can be any bit combination of \f3DT_SAMECMP\fP and \f3DT_SAMEHASH\fP.
\f3DT_SAMECMP\fP means that objects will compare exactly the same as before
thus obviating the need for reordering or removing new duplicates.
\f3DT_SAMEHASH\fP means that hash values of objects remain the same
thus obviating the need to rehash.
\f3dtdisc()\fP returns the previous discipline on success
and \f3NULL\fP on error.
.Ss "  Dtmethod_t dtmethod(Dt_t* dt, const Dtmethod_t* meth)"
If \f3meth\fP is \f3NULL\fP, \f3dtmethod()\fP returns the current method.
Otherwise, it changes the storage method of \f3dt\fP to \f3meth\fP.
Objects may be rehashed, reordered, or removed as appropriate.
\f3dtmethod()\fP returns the previous method or \f3NULL\fP on error.
.Ss "  Dt_t* dtview(Dt_t* dt, Dt_t* view)"
A viewpath allows a search or walk starting from a dictionary to continue to another.
\f3dtview()\fP first terminates any current view from \f3dt\fP to another dictionary.
Then, if \f3view\fP is \f3NULL\fP, \f3dtview\fP returns the terminated view dictionary.
If \f3view\fP is not \f3NULL\fP, a viewpath from \f3dt\fP to \f3view\fP is established.
\f3dtview()\fP returns \f3dt\fP on success and \f3NULL\fP on error.
.PP
It is an error to have dictionaries on a viewpath with different storage methods.
In addition, dictionaries on the same view path should
treat objects in a consistent manner with respect to comparison or hashing.
If not, undefined behaviors may result.
.Ss "  int dtcustomize(Dt_t* dt, int type, int action)"
This customizes a storage method. The \f3type\fP argument
is composed of bits indicating different types of customization.
The \f3action\fP argument, if positive, turns on the desired customization;
else, turning it off.
The return value is a bit vector telling the customization types successfully performed.

Here are the types:
.Tp
\f3DT_SHARE\fP:
This controls the shared or concurrent mode for a dictionary.
Shared mode allows concurrent threads or processes to safely
access objects in a dictionary.
.Tp
\f3DT_ANNOUNCE\fP:
This requires each dictionary access operation to invoke
the discipline \f3eventf\fP function to announce an object found or constructed
by the operation before returning (See the DISCIPLINE section below).
.Tp
\f3DT_OPTIMIZE\fP:
This causes the underlying method to optimize its internal
data structure. For example, the splay tree underlying \f3Dtoset\fP
would be balanced.
.Ss "  int dtuserlock(Dt_t* dt, unsigned int key, int action)"
This manipulates the lock \f3dt->user->lock\fP.
It returns 0 on success and -1 on failure.
The value of \f3key\fP must be non-zero.
The argument \f3action\fP is used as follows:
.Tp
\f3action < 0\fP:
Unlock \f3dt->user.lock\fP if it was locked with \f3key\fP.
An error will result if \f3dt->user->lock\fP was locked with a different key.
.Tp
\f3action == 0\fP:
Attempt to lock \f3dt->user->lock\fP with \f3key\fP if it is unlocked.
An error will result if the dictionary was already locked with a different key.
.Tp
\f3action > 0\fP:
Attempt to lock \f3dt->user->lock\fP with \f3key\fP.
If \f3dt->user.lock\fP is already locked with a different key,
the call will block until \f3dt->user->lock\fP can be locked with the given \f3key\fP.

Note that obtaining or removing a lock with \f3dtuserlock()\fP
is just a service provided to the
application for their own use and has nothing to do with dictionary operations
which may or may not employ their own locking schemes based on the semantics
of the container data structures in use.
.Ss "  void* dtuserdata(Dt_t* dt, void* data, int set)"
This function returns the current value of \f3dt->user->data\fP.
In addition, if \f3set\fP is non-zero,
the value of \f3dt->user->data\fP will be changed to \f3data\fP.
.Ss "  int dtuserevent(Dt_t* dt, int flags, void* data)"
This function invokes the discipline event function
with the event \f3DT_ANNOUNCE|DT_USER|flags\fP and the given data.

.Ss "STORAGE METHODS"
.PP
Storage methods are of type \f3Dtmethod_t*\fP.
\fICdt\fP supports the following methods:
.Ss "  Dtoset"
.Ss "  Dtobag"
Objects are ordered by comparisons.
\f3Dtoset\fP keeps unique objects.
\f3Dtobag\fP allows repeatable objects.
.Ss "  Dtset"
.Ss "  Dtbag"
Objects are unordered.
\f3Dtset\fP keeps unique objects.
\f3Dtbag\fP allows repeatable objects.
The underlying data structure is a hash table with chaining to handle collisions.
.Ss "  Dtrhset"
.Ss "  Dtrhbag"
These methods are like \f3Dtset\fP and \f3Dtbag\fP but are based on
a recursive hashing data structure that allows table extension without
object relocation. The data structure also supports lock-free
concurrent search operations for shared dictionaries and nearly lock-free
insertions and deletions.
.Ss "  Dtlist"
Objects are kept in a list.
\fIA current object\fP is always defined to be either the head of
the list or an object resulting from a recent search or insert operation.
The calls \f3dtinsert()\fP and \f3dtinstall()\fP will insert a new object
in front of such a current object
while the call \f3dtappend()\fP will append in back of it.
.Ss "  Dtdeque"
Objects are kept in a deque (double-ended queue; pronounce "deck").
This is similar to \f3Dtlist\fP
except that objects are always inserted at the front and appended at the tail
of the list.
.Ss "  Dtstack"
Objects are kept in a stack, i.e., in reverse order of insertion.
Thus, the last object inserted is at stack top
and will be the first to be deleted.
.Ss "  Dtqueue"
Objects are kept in a queue, i.e., in order of insertion.
Thus, the first object inserted is at queue head
and will be the first to be deleted.
.Ss "DISCIPLINE"
.PP
Object format and associated management functions are
defined in the type \f3Dtdisc_t\fP:
.Cs
    typedef struct
    { ssize_t    key, size;
      ssize_t    link;
      Dtmake_f   makef;
      Dtfree_f   freef;
      Dtcompar_f comparf;
      Dthash_f   hashf;
      Dtmemory_f memoryf;
      Dtevent_f  eventf;
    } Dtdisc_t;
.Ce
.Ss "  ssize_t key, size"
Each object \f3obj\fP is identified by a key used for object comparison or hashing.
\f3key\fP should be non-negative and defines an offset into \f3obj\fP.
If \f3size\fP is negative, the key is a null-terminated
string with starting address \f3*(void**)((char*)obj+key)\fP.
If \f3size\fP is zero, the key is a null-terminated string with starting address
\f3(void*)((char*)obj+key)\fP.
Finally, if \f3size\fP is positive, the key is a byte array of length \f3size\fP
starting at \f3(void*)((char*)obj+key)\fP.
.Ss "  ssize_t link"
Let \f3obj\fP be an object to be inserted into \f3dt\fP.
If \f3link\fP is negative, an object holder of type \f3Dtlink_t\fP
will be allocated to hold \f3obj\fP.
Otherwise, \f3obj\fP should have
a \f3Dtlink_t\fP structure embedded \f3link\fP bytes into it,
i.e., at address \f3(Dtlink_t*)((char*)obj+link)\fP.
.Ss "  void* (*makef)(Dt_t* dt, void* obj, Dtdisc_t* disc)"
If \f3makef\fP is not \f3NULL\fP,
\f3dtinsert()\fP, \f3dtinstall()\fP or \f3dtappend()\fP will call it
to make a copy of \f3obj\fP suitable for insertion into \f3dt\fP.
If \f3makef\fP is \f3NULL\fP, \f3obj\fP itself will be inserted into \f3dt\fP.
.Ss "  void (*freef)(Dt_t* dt, void* obj, Dtdisc_t* disc)"
If not \f3NULL\fP,
\f3freef\fP is used to destroy data associated with \f3obj\fP.
.Ss "  int (*comparf)(Dt_t* dt, void* key1, void* key2, Dtdisc_t* disc)"
If not \f3NULL\fP, \f3comparf\fP is used to compare two keys.
Its return value should be \f3<0\fP, \f3=0\fP, or \f3>0\fP to indicate
whether \f3key1\fP is smaller, equal to, or larger than \f3key2\fP.
All three values are significant for method \f3Dtoset\fP and \f3Dtobag\fP.
For other methods, a zero value
indicates equality and a non-zero value indicates inequality.
If \f3(*comparf)()\fP is \f3NULL\fP, an internal function is used
to compare the keys as defined by the \f3Dtdisc_t.size\fP field.
.Ss "  unsigned int (*hashf)(Dt_t* dt, void* key, Dtdisc_t* disc)"
If not \f3NULL\fP,
\f3hashf\fP is used to compute the hash value of \f3key\fP.
It is required that keys compared equal will also have same hash values.
If \f3hashf\fP is \f3NULL\fP, an internal function is used to hash
the key as defined by the \f3Dtdisc_t.size\fP field.
.Ss "  void* (*memoryf)(Dt_t* dt, void* addr, size_t size, Dtdisc_t* disc)"
If not \f3NULL\fP, \f3memoryf\fP is used to allocate and free memory.
When \f3addr\fP is \f3NULL\fP, a memory segment of size \f3size\fP is requested.
If \f3addr\fP is not \f3NULL\fP and \f3size\fP is zero, \f3addr\fP is to be freed.
If \f3addr\fP is not \f3NULL\fP and \f3size\fP is positive,
\f3addr\fP is to be resized to the given size.
If \f3memoryf\fP is \f3NULL\fP, \fImalloc(3)\fP is used.
.Ss "  int (*eventf)(Dt_t* dt, int type, void* data, Dtdisc_t* disc)"
If not \f3NULL\fP, \f3eventf\fP announces various events.
Each event may have particular handling of the return values from \f3eventf\fP.
But a negative return value typically means failure.
Following are the events:
.Tp
\f3DT_OPEN\fP:
This event is raised at the start of the process to open a new dictionary.
The argument \f3data\fP will be a pointer to an object of type \f3void*\fP
initialized to \f3NULL\fP before the call. The return value of \f3eventf()\fP
is significant as follows:

On a negative return value, \f3dtopen()\fP will return failure.

On a zero return value, \f3eventf()\fP may set \f3*(void**)data\fP to some non-\f3NULL\fP
value to indicate that the dictionary structure itself should be allocated
along with the \f3Dt_t.data\fP section.
Otherwise, it will be allocated separately with \f3malloc(3)\fP.

On a positive return value, the dictionary is being reconstructed
based on the existing states of some previous dictionary.
In this case, \f3eventf()\fP should set \f3*(void**)data\fP to point to
the field \f3Dt_t.data\fP of the corresponding previous dictionary (see \f3DT_CLOSE\fP below).
If the handle of the previous dictionary was created as discussed above
in the case of the zero return value, it will be exactly restored.
Otherwise, a new handle will be allocated with \f3malloc()\fP.
The ability to create different dictionaries sharing the same set of objects
allows for managing objects in shared and/or persistent memory.
.Tp
\f3DT_ENDOPEN\fP:
This event is raised at the end of the process to open a dictionary.
The return value of \f3eventf()\fP will be ignored.
.Tp
\f3DT_CLOSE\fP:
This event is raised at the start of the process to close dictionary \f3dt\fP.
The return value of \f3eventf\fP is significant as follows:

On a negative return value, \f3dtclose()\fP will return failure.

On a zero return value, all dictionary objects will be deleted and
and associated memory freed.

On a positive return value, allocated objects and memory will be kept intact.
This means that \f3dt->data\fP remains intact and can be reused in some future
dictionary (see \f3DT_OPEN\fP above).
Note, however, that \f3dt\fP itself would still be freed if it was allocated with \f3malloc(3)\fP.
.Tp
\f3DT_ENDCLOSE\fP:
This event is raised at the end of the process to close a dictionary.
The return value of \f3eventf()\fP will be ignored.
.Tp
\f3DT_DISC\fP:
This event indicates that the discipline of \f3dt\fP is being changed to a new one given in
\f3(Dtdisc_t*)data\fP.
.Tp
\f3DT_METH\fP:
This event indicates that the method of \f3dt\fP is being changed to a new one given in
\f3(Dtmethod_t*)data\fP.
.Tp
\f3DT_HASHSIZE\fP:
This event is raised by the methods \f3Dtset\fP, \f3Dtbag\fP, \f3Dtrhset\fP and \f3Dtrhbag\fP
to ask an application to suggest a size (measured in objects) for the data structure in use.
This is useful, for example, to set a initial size for a hash table to reduce collisions and rehashing.
On each call, \f3*(ssize_t*)data\fP will initially have the current size
(which should be \f30\fP on the first call).

The return value of the event handling function indicates actions to be taken.
If non-positive, the method will proceed with its default actions.
Otherwise, the application may set \f3*(ssize_t*)data\fP to suggest a table size.
The actual table size will be based on the absolute value of \f3*(ssize_t*)data\fP
but may be modified to suit for the data structure in use.
Further, if \f3*(ssize_t*)data\fP was negative, the size of the hash table will be fixed going forward.
.Tp
\f3DT_ERROR\fP:
This event states an error that occurred during some operations, e.g.,
\f3dtinsert()\fP or \f3dtinstall()\fP failing to create a new object due to a memory allocation error.
The argument \f3(char*)data\fP is a null-terminated string describing the problem.
.Tp
\f3DT_ANNOUNCE\fP:
The event will be a combination of this bit and a bit indicating a successful operation.
For example, \f3DT_ANNOUNCE|DT_SEARCH\fP announces that \f3dtsearch()\fP
found the object that was searched for.  The \f3data\fP argument points to the object itself.

The bits representing operations that can cause an announcement are:
\f3DT_INSERT\fP,
\f3DT_DELETE\fP,
\f3DT_REMOVE\fP,
\f3DT_SEARCH\fP,
\f3DT_NEXT\fP,
\f3DT_PREV\fP,
\f3DT_FIRST\fP,
\f3DT_LAST\fP,
\f3DT_MATCH\fP,
\f3DT_ATTACH\fP,
\f3DT_DETACH\fP,
\f3DT_APPEND\fP,
\f3DT_INSTALL\fP,
\f3DT_LEAST\fP, and
\f3DT_MOST\fP.

Note that a call to \f3dtinsert()\fP or \f3dtattach()\fP may return
a successfully inserted new object or a found matching object.
For \f3dtinsert()\fP, the former case will be announced as \f3DT_ANNOUNCE|DT_INSERT\fP while
the latter as \f3DT_ANNOUNCE|DT_INSERT|DT_SEARCH\fP.
For \f3dtattach()\fP, the events will be similarly announced as \f3DT_ANNOUNCE|DT_ATTACH\fP
and \f3DT_ANNOUNCE|DT_ATTACH|DT_SEARCH\fP.
.Ss "#define DTOFFSET(struct_s,member)"
This macro function computes the offset of \f3member\fP from the start
of structure \f3struct_s\fP. It is useful for getting the offset of
a \f3Dtlink_t\fP embedded inside an object.
.Ss "#define DTDISC(disc,key,size,link,makef,freef,comparf,hashf,memoryf,eventf)"
This macro function initializes the discipline pointed to by \f3disc\fP
with the given values.
.Ss "OBJECT OPERATIONS"
.Ss "  void* dtinsert(Dt_t* dt, void* obj)"
.Ss "  void* dtinstall(Dt_t* dt, void* obj)"
.Ss "  void* dtappend(Dt_t* dt, void* obj)"
These functions add an object prototyped by \f3obj\fP into \f3dt\fP.
See \f3Dtdisc_t.makef\fP for object construction.
\f3dtinsert()\fP and \f3dtappend()\fP perform the same function
for all methods except for \f3Dtlist\fP (see \f3Dtlist\fP for details).
For \f3Dtset\fP, \f3Dtrhset\fP or \f3Dtoset\fP,
if there is an object in \f3dt\fP matching \f3obj\fP,
\f3dtinsert()\fP and \f3dtappend()\fP will not insert a new object,
whereas \f3dtinstall()\fP will remove such a matching
object before inserting the new object.

On failure, \f3dtinsert()\fP and \f3dtinstall()\fP return \f3NULL\fP.
Otherwise, the return value is either the newly inserted object
or the matching object as noted.
.Ss "  void* dtdelete(Dt_t* dt, void* obj)"
.Ss "  void* dtremove(Dt_t* dt, void* obj)"
When \f3obj\fP is not \f3NULL\fP, \f3dtdelete()\fP removes some object \fImatching\fP \f3obj\fP
while \f3dtremove()\fP removes \f3obj\fP itself if it exists.
When \f3obj\fP is \f3NULL\fP, if the method is \f3Dtstack\fP or \f3Dtqueue\fP
then the stack top or queue head is respectively deleted.
See \f3Dtdisc_t.freef\fP for object destruction.
\f3dtdelete()\fP and \f3dtremove()\fP return the deleted object or \f3NULL\fP.
.Ss "  void* dtattach(Dt_t* dt, void* obj)"
This function is similar to \f3dtinsert()\fP but \f3obj\fP itself
will be inserted into \f3dt\fP even if a discipline
function \f3makef\fP is defined.
.Ss "  void* dtdetach(Dt_t* dt, void* obj)"
This function is similar to \f3dtdelete()\fP but the object to be deleted
from \f3dt\fP will not be freed (via the discipline \f3freef\fP function).
.Ss "  void* dtsearch(Dt_t* dt, void* obj)"
.Ss "  void* dtmatch(Dt_t* dt, void* key)"
These functions find an object matching \f3obj\fP or \f3key\fP either from \f3dt\fP or
from some dictionary accessible from \f3dt\fP via a viewpath (see \f3dtview()\fP).
The return value is the matching object or \f3NULL\fP.
.Ss "  void* dtfirst(Dt_t* dt)"
.Ss "  void* dtnext(Dt_t* dt, void* obj)"
.Ss "  void* dtlast(Dt_t* dt)"
.Ss "  void* dtprev(Dt_t* dt, void* obj)"
These functions assume some object ordering (more below) and can be used
to iterate over all objects.
\f3dtfirst()\fP returns the first object in \f3dt\fP or \f3NULL\fP if the
dictionary is empty.
\f3dtnext()\fP returns the object coming after \f3obj\fP
or \f3NULL\fP if there is no such object.
\f3dtlast()\fP and \f3dtprev()\fP are like \f3dtfirst()\fP and \f3dtnext()\fP
but work in reverse order.

Objects are ordered based on the storage method in use.
For \f3Dtoset\fP and \f3Dtobag\fP, objects are ordered by object comparisons.
For \f3Dtstack\fP, objects are ordered in reverse order of insertion.
For \f3Dtqueue\fP, objects are ordered in order of insertion.
For \f3Dtlist\fP, objects are ordered by list position.
For \f3Dtset\fP, \f3Dtbag\fP, \f3Dtrhset\fP and \f3Dtrhbag\fP,
objects are ordered by some internal order defined at the time when these
functions are called.
In fact, both forward and reverse orders are defined to be the same
for these methods.

Objects in a dictionary or a viewpath of dictionaries can be walked using
\f3for(;;)\fP loops as below:

.Cs
    for(obj = dtfirst(dt); obj; obj = dtnext(dt,obj))
.Ce
or
.Cs
    for(obj = dtlast(dt); obj; obj = dtprev(dt,obj))
.Ce

The argument \f3obj\fP of \f3dtnext()\fP or \f3dtprev()\fP is treated specially
for a method that allows multiple equal elements such as \f3Dtobag\fP or \f3Dtbag\fP.
If it is in the dictionary, then the returned object will be respectively
immediately before or after it in the implicitly defined object ordering.
If it is not in the dictionary but still matching a group of objects,
then the returned object will be immediately after the last or before the first
of the group respectively.
.PP
.Ss "  void* dtatleast(Dt_t* dt, void* obj)"
.Ss "  void* dtatmost(Dt_t* dt, void* obj)"
\f3dtatleast()\fP returns the smallest object greater or equal to \f3obj\fP.
\f3dtatmost()\fP returns the largest object smaller or equal to \f3obj\fP.
In addition, if there are multiple such objects in \f3dt\fP
(i.e., when a bag method was used), then
\f3dtatmost()\fP returns the first instance of such an object while
\f3dtatleast()\fP returns the last one.
Both functions return \f3NULL\fP if the desired object does not exist.

Again, object ordering depends on the storage method in use.
With \f3Dtoset\fP and \f3Dtobag\fP, objects are linearly ordered by
the discipline comparison function.
As such, it is possible to call \f3dtatleast()\fP or \f3dtatmost()\fP
on an object not in the dictionary and still get a meaningful result.
Storage methods other than \f3Dtoset\fP and \f3Dtobag\fP do not have
an explicit ordering so \f3dtatmost()\fP
and \f3dtatleast()\fP will return \f3NULL\fP when there are no matching objects.
.Ss "  dtwalk(Dt_t* dt, int (*userf)(Dt_t*, void*, void*), void* data)"
This function calls \f3(*userf)(walk,obj,data)\fP on each object in \f3dt\fP and
other dictionaries viewable from it.
\f3walk\fP is the dictionary containing \f3obj\fP.
If \f3userf()\fP returns a \f3<0\fP value,
\f3dtwalk()\fP terminates and returns the same value.
\f3dtwalk()\fP returns \f30\fP on completion.
.Ss "  Dtlink_t* dtflatten(Dt_t* dt)"
.Ss "  Dtlink_t* dtlink(Dt_t* dt, Dtlink_t* link)"
.Ss "  void* dtobj(Dt_t* dt, Dtlink_t* link)"
Using \f3dtfirst()/dtnext()\fP or \f3dtlast()/dtprev()\fP
to walk a single dictionary can incur significant cost due to function calls.
For efficient walking of a single directory (i.e., no viewpathing),
\f3dtflatten()\fP and \f3dtlink()\fP can be used.
Objects in \f3dt\fP are made into a linked list and walked as follows:

.Cs
    for(link = dtflatten(dt); link; link = dtlink(dt,link) )
.Ce
.PP
Note that \f3dtflatten()\fP returns a list of type \f3Dtlink_t*\fP,
not \f3void*\fP. That is, it returns a dictionary holder pointer,
not a user object pointer
(although both are the same if the discipline field \f3link\fP is zero).
The macro function \f3dtlink()\fP
returns the dictionary holder object following \f3link\fP and
the macro function \f3dtobj(dt,link)\fP
returns the user object associated with \f3link\fP,
Beware that a flattened object list is not guaranteed to maintain integrity
if any dictionary operation other than \f3dtlink()\fP is performed
(for example, this is important to watch out for
if a dictionary is in \f3DT_SHARE\fP mode).
.Ss "  void* dtstart(Dt_t* dt, void* obj);"
This function starts a path for walking a dictionary.
Note that such a path is restricted to \f3dt\fP only while disregarding
all viewpath dictionaries (see \f3dtview()\fP).
On success, a structure
to be used in \f3dtstep()\fP for walking the path is returned.
Otherwise, \f3NULL\fP is returned.

If \f3obj\fP is \f3NULL\fP, the path starts at the same object returned by \f3dtfirst()\fP.
If \f3obj\fP is not \f3NULL\fP, it must match some object in the dictionary \f3dt\fP
and the path will start there. No matching object will result in error.
.Ss "  void* dtstop(Dt_t* dt, void* path);"
This function ends a path and releases all memory source associated with it.
.Ss "  void* dtstep(Dt_t* dt, void* path);"
This function returns the object at current position in the given \f3path\fP.
Successive calls move forward one object at a time in the same order that \f3dtnext()\fP
does in the example \f3for(;;)\fP loop above. If there is no more object in the path,
\f3dtstep()\fP returns \f3NULL\fP.

Below is a code fragment showing how to create and walk a path of objects.
This object walking method is more restricted than the \f3dtfirst()/dtnext()\fP method
since viewpathed dictionaries are ignored.
However, it allows multiple paths to be traversed concurrently in the
most efficient manner possible as supported by the underlying data structures.
.Cs
    path = dtstart(dt, firstobj);
    for(obj = dtstep(dt, path); obj; obj = dtstep(dt,path))
    {
        ...
    }
    dtstop(dt, path);
.Ce
.Ss "  Dtlink_t* dtextract(Dt_t* dt)"
.Ss "  Dtlink_t* dtrestore(Dt_t* dt, Dtlink_t* list)"
\f3dtextract()\fP extracts the list of objects from \f3dt\fP and makes it appear empty.
\f3dtrestore()\fP repopulates \f3dt\fP with
a list of objects previously obtained via \f3dtextract()\fP.
It is important that the same discipline and method are in use at both
extraction and restoration. Otherwise, undefined behaviors may result.
These functions return \f3NULL\fP on error.

.Ss "DICTIONARY INFORMATION"
.Ss "  Dt_t* dtvnext(Dt_t* dt)"
This returns the dictionary that \f3dt\fP is viewing, if any.
.Ss "  ssize_t dtvcount(Dt_t* dt)"
This returns the number of dictionaries that view \f3dt\fP.
.Ss "  Dt_t* dtvhere(Dt_t* dt)"
This returns the dictionary \f3v\fP viewable from \f3dt\fP
where an object was found from the most recent search or walk operation.
.Ss "  ssize_t dtsize(Dt_t* dt)"
This function returns the number of objects stored in \f3dt\fP.
.Ss "  ssize_t dtstat(Dt_t *dt, Dtstat_t* st)"
This function reports dictionary statistics.
It returns the number of objects stored in \f3dt\fP.
.PP
\f3Dtstat_t\fP contains the below fields:
.Tp
\f3int meth\fP:
This returns the method used for the dictionary, e.g., \f3DT_SET\fP, \f3DT_OSET\fP, etc.
.Tp
\f3ssize_t size\fP:
This has the number of objects in the dictionary.
.Tp
\f3ssize_t mlev\fP:
This returns the maximum number of levels in the data structure used for object storage, i.e.,
the binary tree (e.g., \f3Dtoset\fP) or the recursive hash table based on a trie structure (e.g., \f3Dtrhset\fP).
For a hash table with chaining (e.g., \f3Dtset\fP and \f3Dtbag\fP),
it gives the length of the longest chain.
.Tp
\f3ssize_t lsize[]\fP:
This gives the object counts at each level.
For a hash table with chaining (e.g., \f3Dtset\fP and \f3Dtbag\fP),
a level is defined as objects at that position in their chains.
The reported levels is limited to less than \f3DT_MAXSIZE\fP.
.Tp
\f3ssize_t tsize[]\fP:
For a recursive hash table using a trie structure (\f3Dtrehash\fP), this counts the number of
sub-tables at each level. For example, \f3tsize[0]\fP should be 1
only for this hash table type.
The reported levels is limited to less than \f3DT_MAXSIZE\fP.
.Tp
\f3char* mesg\fP:
A summary message of some of the statistics.
.Ss "HASH FUNCTIONS"
.Ss "  unsigned int dtstrhash(unsigned int h, char* str, int n)"
This function computes a new hash value from string \f3str\fP and seed value \f3h\fP.
If \f3n\fP is positive, \f3str\fP is a byte array of length \f3n\fP;
otherwise, \f3str\fP is a null-terminated string.
.PP
.SH CONCURRENCY PROGRAMMING NOTES
Applications requiring concurrent accesses of a dictionary whether via separate threads
or processes using shared memory should turn on shared mode for the dictionary.
CDT uses locking and lockless data structures to
provide safe concurrent accesses of objects.
Much of this work is based on the atomic scalar operations available in \fIlibaso(3)\fP.

Even though CDT only considers objects
via the attributes specified in a discipline structure,
practical objects will often have many more attributes germane to the needs of an application.
Thus, beyond safe concurrent dictionary operations, an application must also
protect objects in concurrent computations outside of CDT.
In particular, both \fIobject deletion\fP and \fIobject creation\fP should be handled with care.

The deletion case is relatively simple.
No object should be destroyed as long as there is a reference to it.
This guarantee is automatic when some garbage collection scheme is in place.
Otherwise, some form of reference counting could be used to make sure
that only objects with no reference would be deleted.
An example to be given below discusses how reference counting could be
done using the \f3DT_ANNOUNCE\fP feature of CDT to ensure correct timing
for object deletion.

In general, object attributes should be well-defined before they are used.
The simplest way to ensure this is to completely construct an object before
before inserting it into a shared dictionary.
However, an application using complex objects may try
to avoid unnecessary construction work as follows.
First, only a partial object with minimal information needed for dictionary operations
is constructed.
Then, either\f3dtinsert()\fP or \f3dtattach()\fP is called to insert this partial object
into the dictionary. If the call returns this same object, then it was properly inserted and
the rest of its attributes could then be filled in.
If only a matching object is returned, then the new object is simply discarded.
Although this object construction strategy works well in single-threaded code,
it can cause references to uninitialized data in concurrent computations
because objects are accessible by concurrent code
as soon as \f3dtinsert()\fP or \f3dtattach()\fP returns.
A way to solve this problem is to make sure that an incomplete object
is completed before allowing any dictionary operation accessing such an object
to return it to the application.

Both reference counting for safe objection deletion and ensuring readiness
on object creation can be coordinate with CDT via the event \f3DT_ANNOUNCE\fP.
An example of how to do this is given next.
Objects are assumed to be of type \f3Obj_t\fP and have two
fields: \f3ready\fP to indicate the readiness of an object
and \f3refn\fP for reference counting.
Both fields \f3ready\fP and \f3refn\fP are initialized to zero.
Below are the relevant discipline functions \f3Dtdisc_t.eventf\fP
and \f3Dtdisc_t.freef\fP to handle events and to free an object:

.Cs
    int eventf(Dt_t* dt, int type, void* arg, Dtdisc_t* disc)
    {
        if(type & DT_ANNOUNCE)
        {
            if(!(type & DT_DELETE) )
            {
                Obj_t  *obj = (Obj_t*)arg;

                if(type & ~(DT_ANNOUNCE|DT_INSERT|DT_ATTACH))
                    while(asogetchar(&obj->ready) == 0 )
                        asorelax(1);

                asoaddint(&obj->refn, 1);
            }

            return 0;
        }
        ...
    }

    void freef(Dt_t* dt, void* arg, Dtdisc_t* disc)
    {
        Obj_t  *obj = (Obj_t*)arg;

        while(asogetchar(&obj->ready) == 0 )
            asorelax(1);

        while(asogetint(&obj->refn) > 0 )
            asorelax(1);

        ... destroy the object ...
    }
.Ce

Recall that each operation announcement is composed of \f3DT_ANNOUNCE\fP
and some bits to indicate the operation itself.
The test to exclude \f3dtdelete()\fP (indicated by the bit \f3DT_DELETE\fP)
in \f3eventf()\fP is needed because an announcement always occurs
right before the relevant
CDT operation returns and, in the case of \f3dtdelete()\fP,
the object may/will be already destroyed at that time.

The \f3while()\fP loops in both \f3eventf()\fP and \f3freef()\fP cause
the relevant operations to wait until the object is \fIready\fP (i.e.,
all of its attributes are constructed) before proceeding.
The \f3asorelax(1)\fP call yields control of the processor for 1 nanosecond
so other processes can do their work.
Note that the test for \f3~(DT_ANNOUNCE|DT_INSERT|DT_ATTACH)\fP in \f3eventf()\fP
means that the loop will execute for all CDT operations except for
the \f3dtinsert()\fP or \f3dtattach()\fP call that actually inserts \f3obj\fP
into the dictionary (more on this below).

When the \f3while\fP loop finished, the construction of object \f3obj\fP is known
to be completed. \f3eventf()\fP increases the reference count \f3obj->refn\fP by one
before the respective operation returns \f3obj\fP to the calling code.
On the other hand, \f3freef()\fP waits for the reference
count to reach zero before proceeding to destroy the object.
Waiting for object readiness in \f3freef()\fP before object destruction is necessary
to avoid any issues with deleting uninitialized data.
Again, it should be emphasized that reference counting
is needed only for a memory management model where objects can be freed
regardless of whether or not there are any references to them.
Applications that use some form of garbage collection in general or
for dictionary objects may ignore doing reference counting as done in this example.

Next, consider a fragment of code to access
objects concurrently from different threads or processes:

.Cs
    if((obj = dtmatch(dt, "key_string")) != NULL)
    {
         ...process the object obj...

         asosubint(&obj->refn, 1);
         dtdelete(dt, obj);
    }
.Ce

The sequence of activities is as follows.
First, the call \f3dtmatch()\fP retrieves an object \f3obj\fP.
An announcement would be made during the call just before \f3obj\fP is returned
causing the reference count of \f3obj\fP to be increased by one.
After processing \f3obj\fP, the reference count is decreased by one using the
atomic subtraction operator \f3asosubint()\fP.
Then, \f3dtdelete()\fP is called to delete the object.

A possible danger is that concurrent calls to \f3dtdelete()\fP
may end up causing the same memory to be freed more than once.
Fortunately, this cannot happen.
CDT guarantees that, of all the concurrent calls to \f3dtdelete()\fP on \f3obj\fP,
only one will get far enough to make the \f3freef()\fP call while others do nothing.

Finally, consider a code fragment to construct and use the object \f3obj\fP:

.Cs
    ... construct a partial object obj ...
    if((insobj = dtinsert(dt, obj)) == obj )
    {
        ... fully construct obj ...
        asocaschar(&obj->ready, 0, 1);

        ... compute based on obj...
        asosubint(&obj->refn, 1);
    }
    else
    {   ... destroy the partial obj ...

        ... compute based on insobj...
        asosubint(&insobj->refn, 1);
    }
.Ce

After the \f3dtinsert()\fP call returns,
all other concurrent computations invoking dictionary operations to access \f3obj\fP
will be blocked in the \f3eventf()\fP function until \f3obj->ready\fP is set to 1
by the above \f3asocaschar()\fP call.
As this is a concurrent computing application,
the above code fragment itself can be
executed in parallel with different but equivalent versions of \f3obj\fP.
In that case, only one \f3dtinsert()\fP call will succeed in inserting a new object
while the others will report a matching object, i.e., the one actually inserted.
The announcement of the successful case is \f3DT_ANNOUNCE|DT_INSERT\fP
while the announcement of the other cases is \f3DT_ANNOUNCE|DT_INSERT|DT_SEARCH\fP.
The bit \f3DT_SEARCH\fP causes \f3eventf()\fP to
to run the loop waiting for object completion. Thus, overall, except for the single case
of a successful insertion of a new object, all other dictionary accesses that involve
this object will return only when the object is ready.

Note that, for simplicity, the possibility of failure was ignored in the example.
In both successful outcomes of \f3dtinsert()\fP, the reference count of an
appropriate object will be increased by one. Thus, care must be taken to
reduce that reference count for the object after it is no longer needed.
Else, per this example implementation, a deletion of such an object will
cause an infinite loop in the discipline \f3freef()\fP function.
It is possible to implement a delayed object destruction scheme
that avoids an infinite loop waiting for the reference count to drop to zero.
However, a discussion of that is beyond the scope of this document.
.PP
.SH IMPLEMENTATION NOTES
\f3Dtlist\fP, \f3Dtstack\fP, \f3Dtdeque\fP and \f3Dtqueue\fP are based on doubly linked list.
\f3Dtoset\fP and \f3Dtobag\fP are based on top-down splay trees.
\f3Dtset\fP and \f3Dtbag\fP are based on hash tables with collision chains.
\f3Dtrhset\fP and \f3Dtrhbag\fP are based on a recursive hashing data structure
that avoids table resizing.
.PP
.SH SEE ALSO
libaso(3), libvmalloc(3)
.PP
.SH AUTHOR
Kiem-Phong Vo, kpv@research.att.com
